//the implementation file were the functions and classes are defined

#include <stdlib.h>

template <class Item>
BinaryTreeNode<Item>* create_node
(
 const Item& entry,
 BinaryTreeNode<Item>* l_ptr = NULL,
 BinaryTreeNode<Item>* r_ptr = NULL

 )

{
	BinaryTreeNode<Item> *result_ptr;

	result_ptr = new BinaryTreeNode<Item>;
	result_ptr->data          = entry;
	result_ptr->left          = l_ptr;
	result_ptr->right         = r_ptr;

	return result_ptr;
}

template <class Item>
bool is_leaf(const BinaryTreeNode<Item>& node)
{
	return (node.left == NULL) && (node.right == NULL);
}

template <class Item>
void tree_clear(BinaryTreeNode<Item>*& root_ptr)
{
	if (root_ptr != NULL)
	{
		tree_clear(root_ptr->left);
		tree_clear(root_ptr->right);
		delete root_ptr;
		root_ptr = NULL;
	}
}

template <class Item>
BinaryTreeNode<Item>* tree_copy(BinaryTreeNode<Item>* root_ptr)
{
	BinaryTreeNode<Item> *l_ptr;
	BinaryTreeNode<Item> *r_ptr;
	if (root_ptr == NULL)
		return NULL;
	else
	{
		l_ptr = tree_copy(root_ptr->left);
		r_ptr = tree_copy(root_ptr->right);
		return create_node(root_ptr->data, l_ptr, r_ptr);
	}
}